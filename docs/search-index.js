var searchIndex = JSON.parse('{\
"lsynth":{"doc":"This library is for generating L-Synth audio streams.","t":[13,3,3,3,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,3,13,3,4,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,6],"n":["AmplitudeSlide","ChipGenerationData","ChipParameters","ChipState","Command","ForceSetAmplitude","ForceSetPanning","FrequencySlide","PanningSlide","SetAmplitude","SetCustomWaveform","SetFrequency","SetPanning","SetPhase","SetWaveform","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_compatible","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","errors","from","from","from","from","generate","generated","get_tick_frames","init","init","init","init","into","into","into","into","new","new","parameters","remaining_samples","send_command","serialize","serialize","set_sample_rate","set_tick_rate","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","waveform","0","0","0","0","0","0","0","0","0","0","0","1","1","1","ls_amplitude_slide","ls_force_set_amplitude","ls_force_set_panning","ls_frequency_slide","ls_generate","ls_get_tick_frames","ls_init","ls_panning_slide","ls_send_command","ls_set_amplitude","ls_set_custom_waveform","ls_set_frequency","ls_set_panning","ls_set_phase","ls_set_waveform","InvalidChannel","InvalidChannelError","InvalidWaveform","InvalidWaveformError","LSynthError","UnevenBufferSlice","UnevenBufferSliceError","attempted_channel","attempted_waveform","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","max_channels_of_chip","slice_length","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","CUSTOM_WIDTH","CustomWaveform"],"q":["lsynth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lsynth::Command","","","","","","","","","","","","","","lsynth::c_compatible","","","","","","","","","","","","","","","lsynth::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lsynth::errors::LSynthError","","","lsynth::waveform",""],"d":["An instruction to gradually change the amplitude of the …","Data returned by the generate function of ChipState.","Parameters detailing how an LSynth chip is intended to …","The current state of the LSynth chip.","The different types of commands that can be sent to …","An instruction to change the amplitude of the channel …","An instruction to change the panning of the channel …","An instruction to gradually change the frequency of the …","An instruction to gradually change the panning of the …","An instruction to set the amplitude of the channel on a …","An instruction to change the custom waveform stored in the …","An instruction to set the frequency of the channel in …","An instruction to set the panning of the channel on a …","An instruction to set the phase of a waveform directly.","An instruction to set the waveform of the channel.","","","","","","","","","Provides C compatible functions for working with this …","","","","","","","","","","","","","","","","","Contains the error types that LSynth could return","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Writes a tick worth of interlaced stereo samples generated …","How many samples were generated.","Returns the number of samples in a single tick.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new LSynth chip.","Creates a new set of chip parameters. Tick rate is ticks …","Details how this chip is intended to operate.","How many samples were left in the tick when generation …","Executes a command on the given channel.","","","Sets the samplerate of the chip in hertz.","Sets the tick rate of the chip in hertz.","","","","","","","","","","","","","","","","","","Contains the formulas for generating all the different …","","","","","","","","","","","","","","","Sends an AmplitudeSlide command to the given channel.","Sends a ForceSetAmplitude command to the given channel.","Sends a ForceSetPanning command to the given channel.","Sends a FrequencySlide command to the given channel.","Generates audio with the provided chip.","Returns the number of samples that are in a single tick.","Initiates a new LSynth chip","Sends a PanningSlide command to the given channel.","Inserts a command into the provided chip_state","Sends a SetAmplitude command to the given channel.","Sends a SetCustomWaveform command to the given channel.","Sends a SetFrequency command to the given channel.","Sends a SetPanning command to the given channel.","Sends a SetPhase command to the given channel.","Sends a SetWaveform command to the given channel.","Attempted to send a command to a channel that does not …","Occurs when attempting to send a command to a channel that …","Attempted to send a command to set the channel to a …","Occurs when attempting to send a command to set the …","Errors that are returned when LSynth is given invalid …","Attempted to fill a buffer with an odd number of samples.","Occurs when attempting to fill a buffer with an odd number …","The channel that a command was attempted to be sent to.","The number that was attempted to be used as a waveform …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How many channels the chip actually has.","The length of the slice.","","","","","","","","","","","","","","","","","","","","The number of samples in a custom waveform.","Custom waveforms only need to contain an array of data. …"],"i":[1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,3,1,4,2,3,1,4,0,1,1,2,3,1,4,2,3,1,4,1,4,2,3,1,4,0,2,3,1,4,2,3,4,2,3,1,4,2,3,1,4,2,4,2,3,2,1,4,4,4,1,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,0,5,6,7,8,9,10,11,12,13,14,15,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,16,0,17,18,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,17,19,16,18,17,19,16,18,17,19,16,18,17,19,16,18,17,19,20,21,22,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["command",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["chipgenerationdata",3],["lsyntherror",4]]]],null,[[["",0]],["f32",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["usize",0],["chipparameters",3]],["chipstate",3]],[[["usize",0],["f32",0],["f32",0]],["chipparameters",3]],null,null,[[["",0],["command",4],["usize",0]],["result",4,[["lsyntherror",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["usize",0]]],[[["",0],["f32",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",0],["f32",0],["f32",0]]],[[["usize",0],["f32",0]]],[[["usize",0],["f32",0]]],[[["usize",0],["f32",0],["f32",0]]],[[["usize",0],["usize",0]],["chipgenerationdata",3]],[[],["f32",0]],[[["usize",0],["usize",0],["f32",0],["f32",0]]],[[["usize",0],["f32",0],["f32",0]]],[[["command",4],["usize",0]]],[[["usize",0],["f32",0]]],[[["usize",0],["usize",0]]],[[["usize",0],["f32",0]]],[[["usize",0],["f32",0]]],[[["usize",0],["f32",0]]],[[["usize",0],["usize",0]]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null],"p":[[4,"Command"],[3,"ChipState"],[3,"ChipGenerationData"],[3,"ChipParameters"],[13,"SetWaveform"],[13,"SetFrequency"],[13,"SetAmplitude"],[13,"SetPanning"],[13,"SetCustomWaveform"],[13,"SetPhase"],[13,"ForceSetAmplitude"],[13,"ForceSetPanning"],[13,"FrequencySlide"],[13,"AmplitudeSlide"],[13,"PanningSlide"],[4,"LSynthError"],[3,"InvalidChannelError"],[3,"InvalidWaveformError"],[3,"UnevenBufferSliceError"],[13,"InvalidWaveform"],[13,"InvalidChannel"],[13,"UnevenBufferSlice"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};